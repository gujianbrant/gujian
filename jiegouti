/*struct block_device_operations结构体*/
struct block_device_operations
{
  int (*open) (struct inode *, struct file *);/*打开设备*/
  int(*release) (struct inode *, struct file *);/*释放*/
  int(*ioct1) (struct inode *, struct file *, unsigned, unsigned long);/*系统调用的实现*/
  long(*unlocked_ioct1) (struct file *, unsigned, unsigned long);
  long(*compat_ioct1) (struct file *,unsigned, unsigned long);
  int(*direct_access) (struct block_device *, sector_t, unsigned long *);
  int(*media_changed) (struct gendisk *);/*用于检查驱动器介质是否改变*/
  int(*revalidate_disk) (struct gendisk *);/*使介质有效*/
  int(*getgeo) (struct block_device *, struct hd_geometry *);/*填充驱动器信息*/
  struct module *owner;/*模块拥有者*/
};

/*struct gendisk结构体*/
struct gendisk
{
    int major;/*主设备号*/
    int first_minor;/*第一个次设备号*/
    int minors;/*最大次设备号数量，如果设备不能分区，该值为1*/
    char disk_name[32];/*主设备名*/
    struct hd_struct **part;/*分区信息*/
    int part_uevent_suppress;
    struct block_device_operations *fops;/*设备操作结构体*/
    struct request_queue *queue;/*设备请求队列*/
    void *private_date;/*私有数据*/
    sector_t capacity;/*扇区数*/
    int flags;/*设置驱动器状态的标志*/
    char devfs_name[64];
    int number;
    struct device *driverfs_dev;
    struct kobject kobj;
    struct timer_rand_state *random;
    int policy;
    atomic_t sync_io;
    unsigned long stamp,stamp_idle;
    int in_flight;
    #ifdef CONFIG_SMP
    struct disk_stats *dkstats;
    #else
    struct disk_states dkstats;
    #endif
};

struct gendisk *alloc_disk(int minors);/*分配磁盘*/
void add_disk(struct gendisk *disk);/*激活磁盘*/
void del_gendisk(struct gendisk *gp);/*卸载磁盘*/
static inline void set_capacity(struct gendisk *disk,sector_t size);/*设置容量*/
void blk_queue_hardsect_size(request_queue_t *q,unsigned short size);/*设置扇区大小*/

/*struct request_queue结构体*/
struct request_queue
{
    struct list_head queue_head;
    struct request *last_merge;
    elevator_t elevator;
    request_fn_proc *request_fn;
    merge_request_fn *back_merge_fn;
    merge_request_fn *front_merge_fn;
    merge_requests_fn *merge_requests_fn;
    make_request_fn *make_request_fn;
    prep_rq_fn *prep_rq_fn;
    unplug_fn *unplug_fn;
    merge_bvec_fn *merge_bvec_fn;
    activity_fn *activity_fn;
    struct timer_list unplug_timer;
    int unplug_thresh;
    unsigned long unplug_delay;
    
}
