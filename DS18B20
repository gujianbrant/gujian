#include<reg52.h>
#define uchar unsigned char
#define uint unsigned int
#include"24C16.h"
sbit led0=P0^0;
sbit led1=P0^1;
sbit led2=P0^2;
sbit led3=P0^3;	     //报警显示灯
sbit s1=P0^4;		 //yrsfm选择按键
sbit s2=P0^5;		 //yrsfm调节增加按键
sbit s3=P0^6;	     //yrsfm调节减小按键
sbit DQ=P1^0;	     //DS18B20温度数据端口
sbit key=P1^3;       //切换显示状态
sbit beep=P1^4;    	 //蜂鸣器温度报警
sbit EN=P1^5;	     //1602使能端
sbit RW=P1^6;	     //1602读写选择端
sbit RS=P1^7;	     //1602数据命令选择端
uint warn_l1=1600;	 //温度下限1——16摄氏度
uint warn_l2=1500;	 //温度下限2——15摄氏度
uint warn_h1=2100;	 //温度上限1——21摄氏度
uint warn_h2=2200;	 //温度上限2——22摄氏度
union{
	uchar c[2];
	uint x;
}temp;
uint cc,cc2;         //变量cc中保存读出的温度值
float cc1;
uchar k;
uchar flag;          //flag为温度值的正负号标志单元，“1”表示为负值，“0”时表示为正值
uchar count,s1num;	 //定时器计数、选择按键计数
char yue,ri,shi,fen,miao;	//月、日、时、分、秒
uchar num[9]={"208120614"};	//学号
uchar name[6]={"gujian"};	//姓名
uchar buff1[6]={"+00.0"};	//-55~99温度值
uchar table1[]={0x08,0x04,0x12,0x0b,0x07,0x0f,0x1f,0x00};
uchar table2[]={0x04,0x08,0x11,0x1a,0x1c,0x1e,0x1f,0x00};//晴
uchar table3[]={0x03,0x07,0x0f,0x1f,0x04,0x09,0x12,0x00};
uchar table4[]={0x18,0x1c,0x1e,0x1f,0x12,0x04,0x08,0x00};//雨

//延时函数
void delay(uint useconds)
{
	for(;useconds>0;useconds--);
} 

//1ms延时函数
void delayms(uint z)
{
	uint x,y;
	for(x=z;x>0;x--)
		for(y=110;y>0;y--);
}


//1602相关函数定义
//检查忙函数
void fbusy()
{
	P2=0xff;
	RS=0;
	RW=1;
	EN=1;
	EN=0;
	while((P2&0x80))
	{
		EN=0;
		EN=1;
	}
} 

//写命令函数
void write_com(uchar com)
{
	fbusy();
	EN=0;
	RS=0;
	RW=0;
	EN=1;
	P2=com;
	EN=0;
}

//写数据函数
void write_data(uchar date)
{
	fbusy();
	EN=0;
	RS=1;
	RW=0;
	EN=1;
	P2=date;
	EN=0;
}

//1602初始化
void init_1602()
{
	write_com(0x38);    //使用8位数据，显示两行，使用5*7的字型
	write_com(0x0c);    //显示器开，光标开，字符不闪烁
	write_com(0x06);    //字符不动，光标自动右移一格
	write_com(0x01);    //清屏
}


//DS18B20相关函数定义
//复位
uchar ow_reset(void)
{
	uchar presence;
	DQ=0;                   //DQ低电平
	delay(50);              //480ms
	DQ=1;                   //DQ高电平
	delay(3);               //等待
	presence=DQ;            //presence信号
	delay(25);
	return(presence);		//0允许，1禁止
} 

//从单总线上读取一个字节
uchar read_byte(void)
{
	uchar i;
	uchar value=0;
	for(i=8;i>0;i--)
	{
		value>>=1;
		DQ=0;
		DQ=1;
		delay(1);
		if(DQ) value|=0x80;
		delay(6);
	}
	return(value);
}

//向单总线上写一个字节
void write_byte(uchar val)
{
	uchar i;
	for(i=8;i>0;i--)	  //一次写一字节
	{
		DQ=0;
		DQ=val&0x01;
		delay(5);
		DQ=1;
		val=val/2;
	}
	delay(5);
}

//读取温度
void Read_Temperature(void)
{
	ow_reset();
	write_byte(0xcc);     //跳过ROM
	write_byte(0xbe);	  //读
	temp.c[1]=read_byte();
	temp.c[0]=read_byte();
	ow_reset();
	write_byte(0xcc);
	write_byte(0x44);	   //开始
	return;		
}

//分离和判断温度变量
uint separatetemp()
{
	delay(10000);
	Read_Temperature();             //读取双字节温度
	cc=temp.c[0]*256.0+temp.c[1];
	if(temp.c[0]>0xf8)				//判断温度正负
	{
		flag=1;
		cc=~cc+1;
	}
	else
	flag=0;
	cc1=cc*0.0625;			       //计算出温度值
	cc2=cc1*100;				   //放大100倍，放在整型变量中，便于取数字
	buff1[1]=cc2/1000+0x30;
	if(buff1[1]==0x30)
	{
		buff1[1]=0x20;                
	}							   //取出十位，转换成字符，如果十位是0，不显示
	buff1[2]=cc2/100-(cc2/1000)*10+0x30; //取出个位，转换成字符
	buff1[4]=cc2/10-(cc2/100)*10+0x30;  //取出小数点后一位，转换成字符
	if(flag==1)
		buff1[0]='-';
	else
		buff1[0]='+';
	return cc2;					   //返回放大100倍的温度
}

//1602显示温度值
void displaytemp()
{
	write_com(0xc3);
	write_data(0x54);			   //显示T
	write_data(0x3a);			   //显示：
	write_com(0xc5);
	for(k=0;k<6;k++)
	{
		write_data(buff1[k]);
	}
	write_com(0xca);
	write_data(0xdf);			  
	write_data(0x43);			   //显示摄氏度符号
}


//温度处理函数定义
//蜂鸣器报警，灯闪烁
void warn(uint s,uchar led)
{
	uchar i;
	i=s;
	beep=0;
	P0=~(led);
	while(i--)
	{
		displaytemp();			  //调用显示函数延时
	}
	beep=1;
	P0=0xff;
	i=s;
	while(i--)
	{
		displaytemp();
	}
}
	
//温度处理函数
void dealtemp(uint t)
{
	uchar i;
	write_com(0x40);
	for(k=0;k<8;k++)
	{
		write_data(table1[k]);
	}							  //0x00
	write_com(0x48);
	for(k=0;k<8;k++)
	{
		write_data(table2[k]);
	}							  //0x01
									 
	write_com(0x50);
	for(k=0;k<8;k++)
	{
		write_data(table3[k]);
	}							  //0x02
	write_com(0x58);
	for(k=0;k<8;k++)
	{
		write_data(table4[k]);
	}
								  //0x03
						
	if((t>warn_l2)&&(cc2<=warn_l1))
	{
		warn(300,0x01);
		write_com(0xc0+13);
		write_data(0x02);
		write_data(0x03);		
	}
	else if(t<=warn_l2)
	{
		warn(100,0x03);
		write_com(0xc0+13);
		write_data(0x02);
		write_data(0x03);
	}
	else if((t<warn_h2)&&(t>=warn_h1))
	{
		warn(300,0x04);
		write_com(0xc0+13);
		write_data(0x00);
		write_data(0x01);		
	}
	else if(t>=warn_h2)
	{
		warn(100,0x0c);
		write_com(0xc0+13);
		write_data(0x00);
		write_data(0x01);
	}
	else
	{
		i=30;
		while(i--)
		{
			displaytemp();
		}
	}
}						   

//显示时钟相关函数定义
//写时分秒函数
void write_yrsfm(uchar add,uchar date)
{
	uchar shi,ge;
	shi=date/10;
	ge=date%10;
	write_com(0x80+add);
	write_data(0x30+shi);
	write_data(0x30+ge);
}

void init_clock()
{
	yue=0;
	ri=0;
	shi=0;
	fen=0;
	miao=0;
	count=0;
	s1num=0;
	init_24C16();
	write_com(0x80+3);
	write_data(0x2f);
	write_com(0x80+9);
	write_data(0x3a);
	write_com(0x80+12);
	write_data(0x3a);
	yue=read_add(1);
	ri=read_add(2);
	shi=read_add(3);
	fen=read_add(4);
	miao=read_add(5);
	write_yrsfm(1,yue);
	write_yrsfm(4,ri);
	write_yrsfm(7,shi);
	write_yrsfm(10,fen);
	write_yrsfm(13,miao);
	TMOD=0x01;
	TH0=(65536-50000)/256;
	TL0=(65536-50000)%256;
	EA=1;
	ET0=1;
	TR0=1;
}

//键盘扫描
void keyscan()
{
	if(s1==0)
	{
		delayms(5);
		if(s1==0)
		{
			s1num++;
			while(!s1);
			if(s1num==1)
			{
				TR0=0;
				write_com(0x80+14);
				write_com(0x0f);
			}
			if(s1num==2)
			{
				write_com(0x80+11);				
			}
			if(s1num==3)
			{
				write_com(0x80+8);
			}
			if(s1num==4)
			{
				write_com(0x80+5);
			}
			if(s1num==5)
			{
				write_com(0x80+2);
			}
			if(s1num==6)
			{
				s1num=0;
				write_com(0x0c);
				TR0=1;
			}
		}
	}
	if(s1num!=0)
	{
		if(s2==0)
		{
			delayms(5);
			if(s2==0)
			{
				while(!s2);
				if(s1num==1)
				{
					miao++;
					if(miao==60)miao=0;
					write_yrsfm(13,miao);
					write_com(0x80+14);
					write_add(5,miao);
				}
				if(s1num==2)
				{
					fen++;
					if(fen==60)fen=0;
					write_yrsfm(10,fen);
					write_com(0x80+11);
					write_add(4,fen);
				}
				if(s1num==3)
				{
					shi++;
					if(shi==24)shi=0;
					write_yrsfm(7,shi);
					write_com(0x80+8);
					write_add(3,shi);
				}
				if(s1num==4)
				{
					ri++;
					if(ri==32)ri=1;
					write_yrsfm(4,ri);
					write_com(0x80+5);
					write_add(2,ri);
				}
				if(s1num==5)
				{
					yue++;
					if(yue==13)yue=1;
					write_yrsfm(1,yue);
					write_com(0x80+2);
					write_add(1,yue);
				}
			}
		}
		if(s3==0)
		{
			delayms(5);
			if(s3==0)
			{
				while(!s3);
				if(s1num==1)
				{
					miao--;
					if(miao==-1)miao=59;
					write_yrsfm(13,miao);
					write_com(0x80+14);
					write_add(5,miao);
				}
				if(s1num==2)
				{
					fen--;
					if(fen==-1)fen=59;
					write_yrsfm(10,fen);
					write_com(0x80+11);
					write_add(4,fen);
				}
				if(s1num==3)
				{
					shi--;
					if(shi==-1)shi=23;
					write_yrsfm(7,shi);
					write_com(0x80+8);
					write_add(3,shi);
				}
				if(s1num==4)
				{
					ri--;
					if(ri==0)ri=31;
					write_yrsfm(4,ri);
					write_com(0x80+5);
					write_add(2,ri);
				}
				if(s1num==5)
				{
					yue--;
					if(yue==0)yue=12;
					write_yrsfm(1,yue);
					write_com(0x80+2);
					write_add(1,yue);
				}
			}
		}
	}
}


//主函数
void main()
{
	delay(10);
	flag=0;
	if(key==0)
	{
		delayms(5);
		if(key==0)
		{				 
			init_1602();
			init_clock();
			while(1)
			{
				keyscan();
			}	
		}		
	}
	else
	{
		init_1602();
		write_com(0x80);
		for(k=0;k<9;k++)
		{
			write_data(num[k]);
		}
		write_com(0xc8);
		for(k=0;k<6;k++)
		{
			write_data(name[k]);
		}
		while(key);
	}	
}

//定时器T0
void timer0() interrupt 1
{
	TH0=(65536-50000)/256;
	TL0=(65536-50000)%256;
	count++;
	if(count==20)
	{
		count=0;
		miao++;
		if(miao==60)
		{
			miao=0;
			fen++;
			if(fen==60)
			{
				fen=0;
				shi++;
				if(shi==24)
				{
					shi=0;
					ri++;
					if(ri==32)
					{
						ri=1;
						yue++;
						if(yue==13)
						{
							yue=1;
						}
						write_yrsfm(1,yue);
						write_add(1,yue);
					}
					write_yrsfm(4,ri);
					write_add(2,ri);
				}
				write_yrsfm(7,shi);
				write_add(3,shi);
			}
			write_yrsfm(10,fen);
			write_add(4,fen);
		}
		write_yrsfm(13,miao);
		write_com(0x80+15);
		write_data(0x20);
		separatetemp();
		dealtemp(separatetemp());
		displaytemp();
		write_add(5,miao);
	}	
}
